[
  {
    "title": "Diagramme de classe",
    "description": "Diagramme contenant un ensemble de données ainsi que de fonctions défini par une entité (Voiture, User) qui vont permettre de structurer le projet",
    "avantages": {
      "first": "Structurer simplement les modèles de données pour une implémentation de fonctionnalités plus facile",
      "second": "Exprimer les besoins d'une application et pouvoir le transmettre dans un langage compréhensible à une équipe entière",
      "third": "Pouvoir avoir une base simple pour développer un plan de développement en conséquence des informations disponible via le diagramme"
    },
    "goodPractices": {
      "accessModifier": "Bien gérer les différents modificateurs d'accès pour permettre un bon développement suivant les règles d'accès aux variables et fonctions.",
      "interactions": "Bien gérer les différentes interactions entre les modèles de classe. Permet une bonne gestion de l'implémentation des fonctionnalités sans avoir de comportements inattendus"
    },
    "image": "./images/UML_class.svg"
  },
  {
    "title": "Diagramme de composants",
    "description": "Diagramme montrant les interactions entre les différents composants nécessaires à l'application",
    "avantages": {
      "first": "Permet de mettre en lumière les différents composants métiers liés à l'application et leurs relations entre composants",
      "second": "Imaginer la structure relationnelle et comportementale liés à la dépendance de composants",
      "third": "Mettre en évidence le comportement de chaque service par rapport à l'interface"
    },
    "goodPractices": {
      "arrowUsing": "L'utilisation de flèches directionnelles pour montrer les relations composants. Attention à bien définir leur sens pour éviter une mauvaise compréhension des relations et faire une mis-conception"
    },
    "image": "./images/diag-composant.PNG"
  }
]